

###### Code referenced from Lab 1 and Lab 3 ######

import os
import logging
from flask import Flask, request, render_template
import math
import random
import yfinance as yf
import pandas as pd
from datetime import date, timedelta
from pandas_datareader import data as pdr
import http.client
import random
import statistics
import json
import ast
import time
from concurrent.futures import ThreadPoolExecutor
import urllib.parse
import numpy as np
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore
import datetime
import requests
import sys

os.environ['AWS_SHARED_CREDENTIALS_FILE']='./cred' 
# Above line needs to be here before boto3 to ensure cred file is read
# from the right place
import boto3




# override yfinance with pandas – seems to be a common step
app = Flask(__name__)

# various Flask explanations available at:  https://flask.palletsprojects.com/en/1.1.x/quickstart/


#variables needed across functions
data=""
data_subset=""
service = 'Lambda'
resources = 1
establish_connection = None
#Push to DB
value_holder={}
#Retain to show results even after termination - to be resetted for analysis
value_retainer={'service':"", 'resources':"", 'price_history':"",'data_points':"", 'buy_sell':"", 'profit_loss':"", 'avg_var95':"", 'avg_var99':"", 'total_profit':"",'output_data':"",'chart_url':"",'execution_time':"",'cost_incurred':"",'running_instances':"",'WarmupTime':""}
        
#variables for EC2 alone
#LIST OF DNS
ec2_instances_ip = []
#LIST OF Ins IDS
ec2_ins_ids = []
#global payload_json
#global runs


### INTIALISATION FOR FIREBASE DB CONNECTION
cred = credentials.Certificate('static/comm034prasanth-firebase-adminsdk-wdtf3-1ed7240007.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

#### VARIABLES FOR TIME CALCULATION #####
execution_time=0
warmup_time=0
########################################

### Code from coursework ###
# override yfinance with pandas – seems to be a common step
yf.pdr_override()

# Get stock data from Yahoo Finance – here, asking for about 3 years
today = date.today()
decadeAgo = today - timedelta(days=1095)



dummy_data_for_Lambda_warmup=str({"inputs": "{\"data\": {\"Date\": [\"2020-05-22\", \"2020-05-26\", \"2020-05-27\", \"2020-05-28\", \"2020-05-29\", \"2020-06-01\", \"2020-06-02\", \"2020-06-03\", \"2020-06-04\", \"2020-06-05\", \"2020-06-08\", \"2020-06-09\", \"2020-06-10\", \"2020-06-11\", \"2020-06-12\", \"2020-06-15\", \"2020-06-16\", \"2020-06-17\", \"2020-06-18\", \"2020-06-19\", \"2020-06-22\", \"2020-06-23\", \"2020-06-24\", \"2020-06-25\", \"2020-06-26\", \"2020-06-29\", \"2020-06-30\", \"2020-07-01\", \"2020-07-02\", \"2020-07-06\", \"2020-07-07\", \"2020-07-08\", \"2020-07-09\", \"2020-07-10\", \"2020-07-13\", \"2020-07-14\", \"2020-07-15\", \"2020-07-16\", \"2020-07-17\", \"2020-07-20\", \"2020-07-21\", \"2020-07-22\", \"2020-07-23\", \"2020-07-24\", \"2020-07-27\", \"2020-07-28\", \"2020-07-29\", \"2020-07-30\", \"2020-07-31\", \"2020-08-03\", \"2020-08-04\", \"2020-08-05\", \"2020-08-06\", \"2020-08-07\", \"2020-08-10\", \"2020-08-11\", \"2020-08-12\", \"2020-08-13\", \"2020-08-14\", \"2020-08-17\", \"2020-08-18\", \"2020-08-19\", \"2020-08-20\", \"2020-08-21\", \"2020-08-24\", \"2020-08-25\", \"2020-08-26\", \"2020-08-27\", \"2020-08-28\", \"2020-08-31\", \"2020-09-01\", \"2020-09-02\", \"2020-09-03\", \"2020-09-04\", \"2020-09-08\", \"2020-09-09\", \"2020-09-10\", \"2020-09-11\", \"2020-09-14\", \"2020-09-15\", \"2020-09-16\", \"2020-09-17\", \"2020-09-18\", \"2020-09-21\", \"2020-09-22\", \"2020-09-23\", \"2020-09-24\", \"2020-09-25\", \"2020-09-28\", \"2020-09-29\", \"2020-09-30\", \"2020-10-01\", \"2020-10-02\", \"2020-10-05\", \"2020-10-06\", \"2020-10-07\", \"2020-10-08\", \"2020-10-09\", \"2020-10-12\", \"2020-10-13\", \"2020-10-14\", \"2020-10-15\", \"2020-10-16\", \"2020-10-19\", \"2020-10-20\", \"2020-10-21\", \"2020-10-22\", \"2020-10-23\", \"2020-10-26\", \"2020-10-27\", \"2020-10-28\", \"2020-10-29\", \"2020-10-30\", \"2020-11-02\", \"2020-11-03\", \"2020-11-04\", \"2020-11-05\", \"2020-11-06\", \"2020-11-09\", \"2020-11-10\", \"2020-11-11\", \"2020-11-12\", \"2020-11-13\", \"2020-11-16\", \"2020-11-17\", \"2020-11-18\", \"2020-11-19\", \"2020-11-20\", \"2020-11-23\", \"2020-11-24\", \"2020-11-25\", \"2020-11-27\", \"2020-11-30\", \"2020-12-01\", \"2020-12-02\", \"2020-12-03\", \"2020-12-04\", \"2020-12-07\", \"2020-12-08\", \"2020-12-09\", \"2020-12-10\", \"2020-12-11\", \"2020-12-14\", \"2020-12-15\", \"2020-12-16\", \"2020-12-17\", \"2020-12-18\", \"2020-12-21\", \"2020-12-22\", \"2020-12-23\", \"2020-12-24\", \"2020-12-28\", \"2020-12-29\", \"2020-12-30\", \"2020-12-31\", \"2021-01-04\", \"2021-01-05\", \"2021-01-06\", \"2021-01-07\", \"2021-01-08\", \"2021-01-11\", \"2021-01-12\", \"2021-01-13\", \"2021-01-14\", \"2021-01-15\", \"2021-01-19\", \"2021-01-20\", \"2021-01-21\", \"2021-01-22\", \"2021-01-25\", \"2021-01-26\", \"2021-01-27\", \"2021-01-28\", \"2021-01-29\", \"2021-02-01\", \"2021-02-02\", \"2021-02-03\", \"2021-02-04\", \"2021-02-05\", \"2021-02-08\", \"2021-02-09\", \"2021-02-10\", \"2021-02-11\", \"2021-02-12\", \"2021-02-16\", \"2021-02-17\", \"2021-02-18\", \"2021-02-19\", \"2021-02-22\", \"2021-02-23\", \"2021-02-24\", \"2021-02-25\", \"2021-02-26\", \"2021-03-01\", \"2021-03-02\", \"2021-03-03\", \"2021-03-04\", \"2021-03-05\", \"2021-03-08\", \"2021-03-09\", \"2021-03-10\", \"2021-03-11\", \"2021-03-12\", \"2021-03-15\", \"2021-03-16\", \"2021-03-17\", \"2021-03-18\", \"2021-03-19\", \"2021-03-22\", \"2021-03-23\", \"2021-03-24\", \"2021-03-25\", \"2021-03-26\", \"2021-03-29\", \"2021-03-30\", \"2021-03-31\", \"2021-04-01\", \"2021-04-05\", \"2021-04-06\", \"2021-04-07\", \"2021-04-08\", \"2021-04-09\", \"2021-04-12\", \"2021-04-13\", \"2021-04-14\", \"2021-04-15\", \"2021-04-16\", \"2021-04-19\", \"2021-04-20\", \"2021-04-21\", \"2021-04-22\", \"2021-04-23\", \"2021-04-26\", \"2021-04-27\", \"2021-04-28\", \"2021-04-29\", \"2021-04-30\", \"2021-05-03\", \"2021-05-04\", \"2021-05-05\", \"2021-05-06\", \"2021-05-07\", \"2021-05-10\", \"2021-05-11\", \"2021-05-12\", \"2021-05-13\", \"2021-05-14\", \"2021-05-17\", \"2021-05-18\", \"2021-05-19\", \"2021-05-20\", \"2021-05-21\", \"2021-05-24\", \"2021-05-25\", \"2021-05-26\", \"2021-05-27\", \"2021-05-28\", \"2021-06-01\", \"2021-06-02\", \"2021-06-03\", \"2021-06-04\", \"2021-06-07\", \"2021-06-08\", \"2021-06-09\", \"2021-06-10\", \"2021-06-11\", \"2021-06-14\", \"2021-06-15\", \"2021-06-16\", \"2021-06-17\", \"2021-06-18\", \"2021-06-21\", \"2021-06-22\", \"2021-06-23\", \"2021-06-24\", \"2021-06-25\", \"2021-06-28\", \"2021-06-29\", \"2021-06-30\", \"2021-07-01\", \"2021-07-02\", \"2021-07-06\", \"2021-07-07\", \"2021-07-08\", \"2021-07-09\", \"2021-07-12\", \"2021-07-13\", \"2021-07-14\", \"2021-07-15\", \"2021-07-16\", \"2021-07-19\", \"2021-07-20\", \"2021-07-21\", \"2021-07-22\", \"2021-07-23\", \"2021-07-26\", \"2021-07-27\", \"2021-07-28\", \"2021-07-29\", \"2021-07-30\", \"2021-08-02\", \"2021-08-03\", \"2021-08-04\", \"2021-08-05\", \"2021-08-06\", \"2021-08-09\", \"2021-08-10\", \"2021-08-11\", \"2021-08-12\", \"2021-08-13\", \"2021-08-16\", \"2021-08-17\", \"2021-08-18\", \"2021-08-19\", \"2021-08-20\", \"2021-08-23\", \"2021-08-24\", \"2021-08-25\", \"2021-08-26\", \"2021-08-27\", \"2021-08-30\", \"2021-08-31\", \"2021-09-01\", \"2021-09-02\", \"2021-09-03\", \"2021-09-07\", \"2021-09-08\", \"2021-09-09\", \"2021-09-10\", \"2021-09-13\", \"2021-09-14\", \"2021-09-15\", \"2021-09-16\", \"2021-09-17\", \"2021-09-20\", \"2021-09-21\", \"2021-09-22\", \"2021-09-23\", \"2021-09-24\", \"2021-09-27\", \"2021-09-28\", \"2021-09-29\", \"2021-09-30\", \"2021-10-01\", \"2021-10-04\", \"2021-10-05\", \"2021-10-06\", \"2021-10-07\", \"2021-10-08\", \"2021-10-11\", \"2021-10-12\", \"2021-10-13\", \"2021-10-14\", \"2021-10-15\", \"2021-10-18\", \"2021-10-19\", \"2021-10-20\", \"2021-10-21\", \"2021-10-22\", \"2021-10-25\", \"2021-10-26\", \"2021-10-27\", \"2021-10-28\", \"2021-10-29\", \"2021-11-01\", \"2021-11-02\", \"2021-11-03\", \"2021-11-04\", \"2021-11-05\", \"2021-11-08\", \"2021-11-09\", \"2021-11-10\", \"2021-11-11\", \"2021-11-12\", \"2021-11-15\", \"2021-11-16\", \"2021-11-17\", \"2021-11-18\", \"2021-11-19\", \"2021-11-22\", \"2021-11-23\", \"2021-11-24\", \"2021-11-26\", \"2021-11-29\", \"2021-11-30\", \"2021-12-01\", \"2021-12-02\", \"2021-12-03\", \"2021-12-06\", \"2021-12-07\", \"2021-12-08\", \"2021-12-09\", \"2021-12-10\", \"2021-12-13\", \"2021-12-14\", \"2021-12-15\", \"2021-12-16\", \"2021-12-17\", \"2021-12-20\", \"2021-12-21\", \"2021-12-22\", \"2021-12-23\", \"2021-12-27\", \"2021-12-28\", \"2021-12-29\", \"2021-12-30\", \"2021-12-31\", \"2022-01-03\", \"2022-01-04\", \"2022-01-05\", \"2022-01-06\", \"2022-01-07\", \"2022-01-10\", \"2022-01-11\", \"2022-01-12\", \"2022-01-13\", \"2022-01-14\", \"2022-01-18\", \"2022-01-19\", \"2022-01-20\", \"2022-01-21\", \"2022-01-24\", \"2022-01-25\", \"2022-01-26\", \"2022-01-27\", \"2022-01-28\", \"2022-01-31\", \"2022-02-01\", \"2022-02-02\", \"2022-02-03\", \"2022-02-04\", \"2022-02-07\", \"2022-02-08\", \"2022-02-09\", \"2022-02-10\", \"2022-02-11\", \"2022-02-14\", \"2022-02-15\", \"2022-02-16\", \"2022-02-17\", \"2022-02-18\", \"2022-02-22\", \"2022-02-23\", \"2022-02-24\", \"2022-02-25\", \"2022-02-28\", \"2022-03-01\", \"2022-03-02\", \"2022-03-03\", \"2022-03-04\", \"2022-03-07\", \"2022-03-08\", \"2022-03-09\", \"2022-03-10\", \"2022-03-11\", \"2022-03-14\", \"2022-03-15\", \"2022-03-16\", \"2022-03-17\", \"2022-03-18\", \"2022-03-21\", \"2022-03-22\", \"2022-03-23\", \"2022-03-24\", \"2022-03-25\", \"2022-03-28\", \"2022-03-29\", \"2022-03-30\", \"2022-03-31\", \"2022-04-01\", \"2022-04-04\", \"2022-04-05\", \"2022-04-06\", \"2022-04-07\", \"2022-04-08\", \"2022-04-11\", \"2022-04-12\", \"2022-04-13\", \"2022-04-14\", \"2022-04-18\", \"2022-04-19\", \"2022-04-20\", \"2022-04-21\", \"2022-04-22\", \"2022-04-25\", \"2022-04-26\", \"2022-04-27\", \"2022-04-28\", \"2022-04-29\", \"2022-05-02\", \"2022-05-03\", \"2022-05-04\", \"2022-05-05\", \"2022-05-06\", \"2022-05-09\", \"2022-05-10\", \"2022-05-11\", \"2022-05-12\", \"2022-05-13\", \"2022-05-16\", \"2022-05-17\", \"2022-05-18\", \"2022-05-19\", \"2022-05-20\", \"2022-05-23\", \"2022-05-24\", \"2022-05-25\", \"2022-05-26\", \"2022-05-27\", \"2022-05-31\", \"2022-06-01\", \"2022-06-02\", \"2022-06-03\", \"2022-06-06\", \"2022-06-07\", \"2022-06-08\", \"2022-06-09\", \"2022-06-10\", \"2022-06-13\", \"2022-06-14\", \"2022-06-15\", \"2022-06-16\", \"2022-06-17\", \"2022-06-21\", \"2022-06-22\", \"2022-06-23\", \"2022-06-24\", \"2022-06-27\", \"2022-06-28\", \"2022-06-29\", \"2022-06-30\", \"2022-07-01\", \"2022-07-05\", \"2022-07-06\", \"2022-07-07\", \"2022-07-08\", \"2022-07-11\", \"2022-07-12\", \"2022-07-13\", \"2022-07-14\", \"2022-07-15\", \"2022-07-18\", \"2022-07-19\", \"2022-07-20\", \"2022-07-21\", \"2022-07-22\", \"2022-07-25\", \"2022-07-26\", \"2022-07-27\", \"2022-07-28\", \"2022-07-29\", \"2022-08-01\", \"2022-08-02\", \"2022-08-03\", \"2022-08-04\", \"2022-08-05\", \"2022-08-08\", \"2022-08-09\", \"2022-08-10\", \"2022-08-11\", \"2022-08-12\", \"2022-08-15\", \"2022-08-16\", \"2022-08-17\", \"2022-08-18\", \"2022-08-19\", \"2022-08-22\", \"2022-08-23\", \"2022-08-24\", \"2022-08-25\", \"2022-08-26\", \"2022-08-29\", \"2022-08-30\", \"2022-08-31\", \"2022-09-01\", \"2022-09-02\", \"2022-09-06\", \"2022-09-07\", \"2022-09-08\", \"2022-09-09\", \"2022-09-12\", \"2022-09-13\", \"2022-09-14\", \"2022-09-15\", \"2022-09-16\", \"2022-09-19\", \"2022-09-20\", \"2022-09-21\", \"2022-09-22\", \"2022-09-23\", \"2022-09-26\", \"2022-09-27\", \"2022-09-28\", \"2022-09-29\", \"2022-09-30\", \"2022-10-03\", \"2022-10-04\", \"2022-10-05\", \"2022-10-06\", \"2022-10-07\", \"2022-10-10\", \"2022-10-11\", \"2022-10-12\", \"2022-10-13\", \"2022-10-14\", \"2022-10-17\", \"2022-10-18\", \"2022-10-19\", \"2022-10-20\", \"2022-10-21\", \"2022-10-24\", \"2022-10-25\", \"2022-10-26\", \"2022-10-27\", \"2022-10-28\", \"2022-10-31\", \"2022-11-01\", \"2022-11-02\", \"2022-11-03\", \"2022-11-04\", \"2022-11-07\", \"2022-11-08\", \"2022-11-09\", \"2022-11-10\", \"2022-11-11\", \"2022-11-14\", \"2022-11-15\", \"2022-11-16\", \"2022-11-17\", \"2022-11-18\", \"2022-11-21\", \"2022-11-22\", \"2022-11-23\", \"2022-11-25\", \"2022-11-28\", \"2022-11-29\", \"2022-11-30\", \"2022-12-01\", \"2022-12-02\", \"2022-12-05\", \"2022-12-06\", \"2022-12-07\", \"2022-12-08\", \"2022-12-09\", \"2022-12-12\", \"2022-12-13\", \"2022-12-14\", \"2022-12-15\", \"2022-12-16\", \"2022-12-19\", \"2022-12-20\", \"2022-12-21\", \"2022-12-22\", \"2022-12-23\", \"2022-12-27\", \"2022-12-28\", \"2022-12-29\", \"2022-12-30\", \"2023-01-03\", \"2023-01-04\", \"2023-01-05\", \"2023-01-06\", \"2023-01-09\", \"2023-01-10\", \"2023-01-11\", \"2023-01-12\", \"2023-01-13\", \"2023-01-17\", \"2023-01-18\", \"2023-01-19\", \"2023-01-20\", \"2023-01-23\", \"2023-01-24\", \"2023-01-25\", \"2023-01-26\", \"2023-01-27\", \"2023-01-30\", \"2023-01-31\", \"2023-02-01\", \"2023-02-02\", \"2023-02-03\", \"2023-02-06\", \"2023-02-07\", \"2023-02-08\", \"2023-02-09\", \"2023-02-10\", \"2023-02-13\", \"2023-02-14\", \"2023-02-15\", \"2023-02-16\", \"2023-02-17\", \"2023-02-21\", \"2023-02-22\", \"2023-02-23\", \"2023-02-24\", \"2023-02-27\", \"2023-02-28\", \"2023-03-01\", \"2023-03-02\", \"2023-03-03\", \"2023-03-06\", \"2023-03-07\", \"2023-03-08\", \"2023-03-09\", \"2023-03-10\", \"2023-03-13\", \"2023-03-14\", \"2023-03-15\", \"2023-03-16\", \"2023-03-17\", \"2023-03-20\", \"2023-03-21\", \"2023-03-22\", \"2023-03-23\", \"2023-03-24\", \"2023-03-27\", \"2023-03-28\", \"2023-03-29\", \"2023-03-30\", \"2023-03-31\", \"2023-04-03\", \"2023-04-04\", \"2023-04-05\", \"2023-04-06\", \"2023-04-10\", \"2023-04-11\", \"2023-04-12\", \"2023-04-13\", \"2023-04-14\", \"2023-04-17\", \"2023-04-18\", \"2023-04-19\", \"2023-04-20\", \"2023-04-21\", \"2023-04-24\", \"2023-04-25\", \"2023-04-26\", \"2023-04-27\", \"2023-04-28\", \"2023-05-01\", \"2023-05-02\", \"2023-05-03\", \"2023-05-04\", \"2023-05-05\", \"2023-05-08\", \"2023-05-09\", \"2023-05-10\", \"2023-05-11\", \"2023-05-12\", \"2023-05-15\", \"2023-05-16\", \"2023-05-17\", \"2023-05-18\", \"2023-05-19\"], \"Open\": [437.0, 427.7699890136719, 410.3800048828125, 417.239990234375, 417.4599914550781, 418.8299865722656, 425.8699951171875, 426.95001220703125, 422.3900146484375, 407.2900085449219, 416.0, 421.6499938964844, 436.0, 428.20001220703125, 429.0, 421.3999938964844, 425.760009765625, 441.82000732421875, 448.7300109863281, 449.1199951171875, 455.010009765625, 466.5, 468.5400085449219, 458.8599853515625, 466.3900146484375, 445.2300109863281, 450.0199890136719, 454.0, 485.6400146484375, 480.7699890136719, 497.30999755859375, 498.5799865722656, 508.3999938964844, 519.72998046875, 567.97998046875, 517.0800170898438, 516.2999877929688, 526.47998046875, 494.8699951171875, 489.1400146484375, 506.0, 492.19000244140625, 491.1300048828125, 468.7699890136719, 484.510009765625, 496.0199890136719, 492.25, 480.7099914550781, 488.2900085449219, 490.8599853515625, 498.6499938964844, 508.67999267578125, 504.1099853515625, 505.45001220703125, 493.3500061035156, 479.75, 471.3399963378906, 478.3999938964844, 482.82000732421875, 484.19000244140625, 484.3500061035156, 493.92999267578125, 484.69000244140625, 496.4599914550781, 495.44000244140625, 488.19000244140625, 492.5, 537.780029296875, 532.0, 521.1599731445312, 532.5999755859375, 553.780029296875, 545.0, 520.1799926757812, 498.3999938964844, 519.2100219726562, 503.3500061035156, 486.489990234375, 480.6199951171875, 484.0, 499.989990234375, 475.1600036621094, 472.510009765625, 467.69000244140625, 489.010009765625, 491.0400085449219, 470.5299987792969, 474.3900146484375, 489.1099853515625, 489.5, 492.57000732421875, 506.0299987792969, 516.4299926757812, 506.79998779296875, 518.719970703125, 518.0, 533.47998046875, 537.8300170898438, 548.8099975585938, 540.5599975585938, 562.6099853515625, 545.52001953125, 549.5, 537.0700073242188, 528.1400146484375, 501.0299987792969, 494.69000244140625, 488.1099853515625, 487.0299987792969, 490.010009765625, 486.3599853515625, 488.5, 502.010009765625, 478.8699951171875, 484.92999267578125, 495.3599853515625, 506.55999755859375, 515.0, 485.5400085449219, 470.95001220703125, 483.0, 491.0, 486.7699890136719, 480.0, 480.1199951171875, 481.95001220703125, 482.0, 485.2200012207031, 490.4599914550781, 478.8399963378906, 485.1300048828125, 486.5799865722656, 490.0799865722656, 492.3399963378906, 501.6199951171875, 502.989990234375, 497.5, 500.010009765625, 517.9000244140625, 510.5299987792969, 494.55999755859375, 495.0, 505.44000244140625, 518.5, 520.1099853515625, 529.0, 533.2000122070312, 530.0499877929688, 527.6900024414062, 524.760009765625, 515.1199951171875, 516.4299926757812, 519.9000244140625, 530.1300048828125, 525.530029296875, 539.0, 521.5499877929688, 511.9700012207031, 508.2799987792969, 511.30999755859375, 507.8399963378906, 500.0, 495.5, 507.3500061035156, 500.0, 501.0, 565.4199829101562, 582.4500122070312, 582.0999755859375, 567.0, 554.72998046875, 550.7100219726562, 535.8800048828125, 538.0, 536.7899780273438, 542.010009765625, 550.1699829101562, 539.8099975585938, 552.260009765625, 555.0, 546.0, 562.5, 564.4400024414062, 556.9400024414062, 557.2899780273438, 550.989990234375, 549.0, 548.0, 534.989990234375, 525.0, 539.7999877929688, 550.27001953125, 546.510009765625, 545.5700073242188, 553.3400268554688, 545.9299926757812, 521.5, 511.9800109863281, 514.4600219726562, 507.30999755859375, 513.5, 512.2000122070312, 512.5, 516.3200073242188, 524.469970703125, 522.0, 516.4000244140625, 504.9599914550781, 509.1300048828125, 529.8699951171875, 533.780029296875, 516.989990234375, 502.82000732421875, 505.6600036621094, 510.510009765625, 515.6699829101562, 529.9299926757812, 540.010009765625, 544.8099975585938, 543.5, 551.1300048828125, 552.6900024414062, 551.0499877929688, 557.0, 554.8699951171875, 544.1699829101562, 550.5399780273438, 546.9000244140625, 554.4199829101562, 508.0, 513.8200073242188, 509.010009765625, 506.760009765625, 512.6199951171875, 505.20001220703125, 507.6000061035156, 505.0, 512.6500244140625, 510.7799987792969, 504.989990234375, 495.989990234375, 504.6199951171875, 502.0, 479.75, 486.8299865722656, 489.1300048828125, 487.8599853515625, 485.5899963378906, 488.3999938964844, 481.6300048828125, 489.54998779296875, 503.1199951171875, 501.04998779296875, 506.0, 502.3399963378906, 501.79998779296875, 504.3999938964844, 504.010009765625, 499.82000732421875, 495.19000244140625, 492.0, 492.9200134277344, 497.0, 494.5, 487.1700134277344, 490.0, 489.67999267578125, 501.2300109863281, 495.0, 490.25, 496.3999938964844, 501.6400146484375, 498.5400085449219, 508.4800109863281, 517.9600219726562, 528.8400268554688, 528.1199951171875, 533.5499877929688, 534.0599975585938, 525.719970703125, 535.5, 533.0, 544.239990234375, 530.9299926757812, 531.0, 540.2999877929688, 535.760009765625, 541.010009765625, 553.969970703125, 541.8099975585938, 526.0499877929688, 526.0700073242188, 526.1300048828125, 510.2099914550781, 512.1599731445312, 514.3800048828125, 518.0800170898438, 521.8200073242188, 519.9600219726562, 512.6900024414062, 519.0, 514.3900146484375, 513.0, 517.1300048828125, 524.0, 521.1500244140625, 520.0, 517.0, 511.8599853515625, 512.6400146484375, 515.239990234375, 515.469970703125, 520.0, 522.739990234375, 545.0900268554688, 545.97998046875, 551.47998046875, 550.1599731445312, 546.1599731445312, 551.5999755859375, 557.25, 566.1199951171875, 569.0, 583.6799926757812, 585.7999877929688, 594.6900024414062, 603.8400268554688, 606.469970703125, 598.1599731445312, 598.5700073242188, 584.8900146484375, 578.1699829101562, 584.2999877929688, 587.8499755859375, 586.7899780273438, 578.3099975585938, 579.6900024414062, 590.7899780273438, 592.5, 587.9500122070312, 589.0, 589.010009765625, 608.0499877929688, 604.239990234375, 613.3900146484375, 606.9400024414062, 628.1799926757812, 642.22998046875, 634.1699829101562, 633.2000122070312, 633.02001953125, 632.1799926757812, 632.22998046875, 638.0, 632.0999755859375, 636.969970703125, 625.5700073242188, 628.8900146484375, 651.8099975585938, 663.739990234375, 673.760009765625, 669.0, 670.9500122070312, 673.0599975585938, 689.0599975585938, 683.1099853515625, 677.27001953125, 685.8900146484375, 663.969970703125, 650.2899780273438, 653.7000122070312, 653.010009765625, 650.239990234375, 660.010009765625, 681.239990234375, 678.27001953125, 690.0, 691.6099853515625, 692.3499755859375, 676.02001953125, 658.1799926757812, 658.010009765625, 675.0, 663.2000122070312, 668.2000122070312, 649.47998046875, 617.0999755859375, 622.75, 606.010009765625, 619.8300170898438, 630.0, 627.5800170898438, 616.780029296875, 612.0, 598.7100219726562, 598.1799926757812, 597.0900268554688, 591.6099853515625, 586.4299926757812, 597.5399780273438, 603.3599853515625, 616.4000244140625, 615.0, 614.9500122070312, 610.7100219726562, 612.989990234375, 610.010009765625, 605.6099853515625, 599.9099731445312, 592.0, 554.3400268554688, 549.4600219726562, 538.489990234375, 536.989990234375, 544.27001953125, 537.0599975585938, 517.5999755859375, 520.0800170898438, 515.0, 517.75, 400.42999267578125, 383.9100036621094, 379.1400146484375, 378.2699890136719, 382.05999755859375, 386.760009765625, 401.9700012207031, 432.9599914550781, 448.25, 421.44000244140625, 407.30999755859375, 410.1700134277344, 398.17999267578125, 408.6499938964844, 402.1000061035156, 405.3299865722656, 387.5899963378906, 403.7900085449219, 401.5299987792969, 394.239990234375, 392.5299987792969, 388.95001220703125, 382.7200012207031, 355.0899963378906, 386.6099853515625, 387.3299865722656, 391.6000061035156, 388.92999267578125, 386.0, 368.0, 360.4100036621094, 349.79998779296875, 357.69000244140625, 356.20001220703125, 361.19000244140625, 338.7200012207031, 335.1000061035156, 348.20001220703125, 359.70001220703125, 372.0, 378.0199890136719, 371.1400146484375, 379.7699890136719, 379.760009765625, 377.07000732421875, 375.2300109863281, 384.3900146484375, 389.54998779296875, 383.5899963378906, 376.79998779296875, 373.54998779296875, 389.29998779296875, 374.1499938964844, 365.0, 361.9599914550781, 350.0, 355.9100036621094, 343.9200134277344, 350.95001220703125, 340.0, 333.2200012207031, 245.1999969482422, 220.0, 220.17999267578125, 213.80999755859375, 208.8000030517578, 194.00999450683594, 191.55999755859375, 198.67999267578125, 191.7100067138672, 198.2899932861328, 197.64999389648438, 200.4499969482422, 186.75, 177.66000366210938, 176.00999450683594, 176.08999633789062, 163.9600067138672, 177.16000366210938, 193.3000030517578, 189.1699981689453, 186.72000122070312, 178.0500030517578, 185.8699951171875, 186.14999389648438, 182.0, 180.27999877929688, 186.49000549316406, 193.19000244140625, 196.17999267578125, 198.6999969482422, 192.02000427246094, 200.13999938964844, 202.08999633789062, 194.8699951171875, 197.9499969482422, 200.64999389648438, 182.63999938964844, 177.07000732421875, 169.75, 169.25999450683594, 174.0, 173.6300048828125, 177.60000610351562, 170.75, 180.5, 183.5, 191.77000427246094, 189.1999969482422, 179.5500030517578, 177.07000732421875, 176.49000549316406, 176.27999877929688, 185.1999969482422, 184.27000427246094, 186.02000427246094, 184.72999572753906, 177.3300018310547, 170.5, 175.55999755859375, 175.5800018310547, 192.5, 193.02000427246094, 208.1699981689453, 214.3000030517578, 222.3800048828125, 221.30999755859375, 216.66000366210938, 216.47999572753906, 224.60000610351562, 223.2899932861328, 223.10000610351562, 222.75999450683594, 224.7899932861328, 227.67999267578125, 225.3000030517578, 227.49000549316406, 231.6199951171875, 236.99000549316406, 244.67999267578125, 244.80999755859375, 248.11000061035156, 247.16000366210938, 241.17999267578125, 241.9600067138672, 240.9499969482422, 232.5500030517578, 226.4600067138672, 225.66000366210938, 230.24000549316406, 233.6300048828125, 221.92999267578125, 226.66000366210938, 227.0, 220.72000122070312, 231.02999877929688, 225.58999633789062, 220.2100067138672, 224.16000366210938, 229.6199951171875, 233.61000061035156, 226.5, 219.82000732421875, 230.47000122070312, 231.22000122070312, 245.0500030517578, 240.3699951171875, 242.6699981689453, 235.35000610351562, 235.13999938964844, 225.60000610351562, 228.6300048828125, 229.69000244140625, 241.61000061035156, 237.0, 237.85000610351562, 244.83999633789062, 238.75999450683594, 236.67999267578125, 235.77000427246094, 225.63999938964844, 226.0500030517578, 214.3000030517578, 212.69000244140625, 237.8000030517578, 234.41000366210938, 249.8000030517578, 265.0, 272.7799987792969, 268.95001220703125, 290.2300109863281, 286.95001220703125, 290.0400085449219, 298.3299865722656, 297.70001220703125, 295.1300048828125, 296.1700134277344, 286.3999938964844, 271.25, 272.0199890136719, 261.05999755859375, 259.9200134277344, 259.6600036621094, 265.989990234375, 274.4700012207031, 290.0, 309.20001220703125, 309.94000244140625, 294.7200012207031, 297.3299865722656, 291.0, 284.989990234375, 285.9100036621094, 289.0, 284.0, 282.5, 281.3699951171875, 303.989990234375, 310.489990234375, 316.4599914550781, 311.0, 306.5, 309.1099853515625, 321.45001220703125, 320.0, 328.0, 318.9700012207031, 302.1199951171875, 288.760009765625, 289.7300109863281, 281.239990234375, 289.989990234375, 298.0899963378906, 296.17999267578125, 293.19000244140625, 281.9200134277344, 283.17999267578125, 285.5299987792969, 298.05999755859375, 298.239990234375, 307.0, 311.57000732421875, 316.8299865722656, 311.07000732421875, 326.5, 332.5, 329.9700012207031, 331.0799865722656, 326.75, 322.57000732421875, 336.7900085449219, 341.7200012207031, 357.5299987792969, 360.57000732421875, 368.7699890136719, 363.20001220703125, 358.44000244140625, 349.9800109863281, 353.8599853515625, 365.1600036621094, 359.0799865722656, 363.6400146484375, 358.510009765625, 360.0199890136719, 372.4100036621094, 359.1600036621094, 349.5, 357.54998779296875, 356.6300048828125, 355.0, 347.9100036621094, 342.8500061035156, 337.5, 331.2300109863281, 319.29998779296875, 323.8699951171875, 323.70001220703125, 321.54998779296875, 310.9599914550781, 315.45001220703125, 317.0, 312.67999267578125, 309.2900085449219, 312.0799865722656, 297.8999938964844, 287.3399963378906, 295.9700012207031, 292.510009765625, 304.75, 310.05999755859375, 299.7900085449219, 306.32000732421875, 306.30999755859375, 304.67999267578125, 320.6300048828125, 327.54998779296875, 326.05999755859375, 326.2900085449219, 340.2699890136719, 340.04998779296875, 341.8299865722656, 348.489990234375, 345.29998779296875, 339.3399963378906, 335.2699890136719, 343.45001220703125, 340.80999755859375, 339.989990234375, 342.94000244140625, 338.0, 335.0, 324.2099914550781, 320.3900146484375, 323.0, 330.20001220703125, 328.5, 321.3599853515625, 324.29998779296875, 325.239990234375, 329.44000244140625, 325.0, 317.54998779296875, 319.010009765625, 323.6099853515625, 322.989990234375, 330.6700134277344, 335.2099914550781, 334.9800109863281, 344.760009765625, 340.6199951171875, 334.0, 331.760009765625, 347.25, 369.8599853515625], \"Close\": [429.32000732421875, 414.7699890136719, 419.8900146484375, 413.44000244140625, 419.7300109863281, 425.9200134277344, 427.30999755859375, 421.9700012207031, 414.3299865722656, 419.6000061035156, 419.489990234375, 434.04998779296875, 434.4800109863281, 425.55999755859375, 418.07000732421875, 425.5, 436.1300048828125, 447.7699890136719, 449.8699951171875, 453.7200012207031, 468.0400085449219, 466.260009765625, 457.8500061035156, 465.9100036621094, 443.3999938964844, 447.239990234375, 455.0400085449219, 485.6400146484375, 476.8900146484375, 493.80999755859375, 493.1600036621094, 502.7799987792969, 507.760009765625, 548.72998046875, 525.5, 524.8800048828125, 523.260009765625, 527.3900146484375, 492.989990234375, 502.4100036621094, 490.1000061035156, 489.82000732421875, 477.5799865722656, 480.45001220703125, 495.6499938964844, 488.510009765625, 484.4800109863281, 485.79998779296875, 488.8800048828125, 498.6199951171875, 509.6400146484375, 502.1099853515625, 509.0799865722656, 494.7300109863281, 483.3800048828125, 466.92999267578125, 475.4700012207031, 481.3299865722656, 482.67999267578125, 482.3500061035156, 491.8699951171875, 484.5299987792969, 497.8999938964844, 492.30999755859375, 488.80999755859375, 490.5799865722656, 547.530029296875, 526.27001953125, 523.8900146484375, 529.5599975585938, 556.5499877929688, 552.8400268554688, 525.75, 516.0499877929688, 507.0199890136719, 500.19000244140625, 480.6700134277344, 482.0299987792969, 476.260009765625, 495.989990234375, 483.8599853515625, 470.20001220703125, 469.9599914550781, 487.3500061035156, 491.1700134277344, 470.6099853515625, 473.0799865722656, 482.8800048828125, 490.6499938964844, 493.4800109863281, 500.0299987792969, 527.510009765625, 503.05999755859375, 520.6500244140625, 505.8699951171875, 534.6599731445312, 531.7899780273438, 539.4400024414062, 539.8099975585938, 554.0900268554688, 541.4500122070312, 541.9400024414062, 530.7899780273438, 530.719970703125, 525.4199829101562, 489.04998779296875, 485.2300109863281, 488.2799987792969, 488.239990234375, 488.92999267578125, 486.239990234375, 504.2099914550781, 475.739990234375, 484.1199951171875, 487.2200012207031, 496.95001220703125, 513.760009765625, 514.72998046875, 470.5, 480.239990234375, 490.760009765625, 486.7699890136719, 482.8399963378906, 479.1000061035156, 480.6300048828125, 481.7900085449219, 484.6700134277344, 488.239990234375, 476.6199951171875, 482.8800048828125, 485.0, 491.3599853515625, 490.70001220703125, 504.5799865722656, 503.3800048828125, 497.5199890136719, 498.30999755859375, 515.780029296875, 512.6599731445312, 493.6000061035156, 501.0899963378906, 503.2200012207031, 522.4199829101562, 519.780029296875, 524.8300170898438, 532.9000244140625, 534.4500122070312, 528.9099731445312, 527.3300170898438, 514.47998046875, 513.969970703125, 519.1199951171875, 530.8699951171875, 524.5900268554688, 540.72998046875, 522.8599853515625, 520.7999877929688, 500.489990234375, 508.8900146484375, 510.3999938964844, 499.1000061035156, 494.25, 507.7900085449219, 500.8599853515625, 497.9800109863281, 501.7699890136719, 586.3400268554688, 579.8400268554688, 565.1699829101562, 556.780029296875, 561.9299926757812, 523.280029296875, 538.5999755859375, 532.3900146484375, 539.0399780273438, 548.1599731445312, 539.4500122070312, 552.1599731445312, 550.7899780273438, 547.9199829101562, 559.0700073242188, 563.5900268554688, 557.5900268554688, 556.52001953125, 557.280029296875, 551.3400268554688, 548.219970703125, 540.219970703125, 533.780029296875, 546.1500244140625, 553.4099731445312, 546.7000122070312, 538.8499755859375, 550.6400146484375, 547.8200073242188, 520.7000122070312, 511.2900085449219, 516.3900146484375, 493.3299865722656, 506.44000244140625, 504.5400085449219, 523.0599975585938, 518.02001953125, 520.25, 524.030029296875, 524.4400024414062, 504.7900085449219, 512.1799926757812, 523.1099853515625, 535.0900268554688, 520.8099975585938, 502.8599853515625, 508.04998779296875, 513.9500122070312, 513.3900146484375, 521.6599731445312, 539.4199829101562, 540.6699829101562, 544.530029296875, 546.989990234375, 554.5800170898438, 555.3099975585938, 552.780029296875, 553.72998046875, 540.02001953125, 549.219970703125, 546.5399780273438, 554.4400024414062, 549.5700073242188, 508.8999938964844, 508.7799987792969, 505.54998779296875, 510.29998779296875, 505.54998779296875, 506.5199890136719, 509.0, 513.469970703125, 509.1099853515625, 503.17999267578125, 496.0799865722656, 499.54998779296875, 503.8399963378906, 486.69000244140625, 495.0799865722656, 484.9800109863281, 486.6600036621094, 493.3699951171875, 488.94000244140625, 486.2799987792969, 487.70001220703125, 501.6700134277344, 497.8900146484375, 502.8999938964844, 501.3399963378906, 502.3599853515625, 503.8599853515625, 502.80999755859375, 499.0799865722656, 499.239990234375, 489.42999267578125, 494.739990234375, 494.6600036621094, 492.3900146484375, 485.80999755859375, 487.2699890136719, 488.7699890136719, 499.8900146484375, 491.8999938964844, 492.4100036621094, 498.3399963378906, 500.7699890136719, 497.0, 508.82000732421875, 512.739990234375, 518.0599975585938, 527.0700073242188, 533.030029296875, 533.5, 528.2100219726562, 533.5399780273438, 533.97998046875, 541.6400146484375, 535.9600219726562, 530.760009765625, 535.97998046875, 537.3099975585938, 540.6799926757812, 547.9500122070312, 542.9500122070312, 530.3099975585938, 532.280029296875, 531.0499877929688, 513.6300048828125, 511.7699890136719, 515.4099731445312, 516.489990234375, 518.9099731445312, 519.2999877929688, 514.25, 517.5700073242188, 515.1500244140625, 510.82000732421875, 517.3499755859375, 524.8900146484375, 520.5499877929688, 519.969970703125, 515.8400268554688, 512.4000244140625, 510.7200012207031, 515.9199829101562, 517.9199829101562, 518.9099731445312, 521.8699951171875, 543.7100219726562, 546.8800048828125, 553.3300170898438, 553.4099731445312, 547.5800170898438, 550.1199951171875, 558.9199829101562, 566.1799926757812, 569.1900024414062, 582.0700073242188, 588.5499877929688, 590.530029296875, 606.7100219726562, 606.0499877929688, 597.5399780273438, 598.719970703125, 589.2899780273438, 577.760009765625, 582.8699951171875, 586.5, 589.3499755859375, 575.4299926757812, 573.1400146484375, 590.6500244140625, 593.260009765625, 592.3900146484375, 592.6400146484375, 583.8499755859375, 599.0599975585938, 610.3400268554688, 613.1500244140625, 603.3499755859375, 634.8099975585938, 639.0999755859375, 631.8499755859375, 632.6599731445312, 627.0399780273438, 624.9400024414062, 629.760009765625, 633.7999877929688, 628.2899780273438, 637.969970703125, 639.0, 625.1400146484375, 653.1599731445312, 664.780029296875, 671.6599731445312, 668.52001953125, 662.9199829101562, 674.0499877929688, 690.3099975585938, 681.1699829101562, 677.719970703125, 688.2899780273438, 668.4000244140625, 645.719970703125, 651.4500122070312, 655.989990234375, 646.9099731445312, 657.5800170898438, 682.6099853515625, 679.3300170898438, 687.4000244140625, 691.6900024414062, 682.02001953125, 678.7999877929688, 659.2000122070312, 654.0599975585938, 658.2899780273438, 665.6400146484375, 663.8400268554688, 641.9000244140625, 617.77001953125, 616.469970703125, 602.1300048828125, 612.6900024414062, 625.5800170898438, 628.0800170898438, 611.0, 611.6599731445312, 604.5599975585938, 597.989990234375, 605.0399780273438, 591.0599975585938, 586.72998046875, 593.739990234375, 604.9199829101562, 614.239990234375, 614.0900268554688, 613.1199951171875, 610.7100219726562, 610.5399780273438, 612.0900268554688, 602.4400024414062, 597.3699951171875, 591.1500244140625, 567.52001953125, 553.2899780273438, 541.0599975585938, 539.8499755859375, 540.8400268554688, 537.219970703125, 519.2000122070312, 525.6900024414062, 510.79998779296875, 515.8599853515625, 508.25, 397.5, 387.1499938964844, 366.4200134277344, 359.70001220703125, 386.70001220703125, 384.3599853515625, 427.1400146484375, 457.1300048828125, 429.4800109863281, 405.6000061035156, 410.1700134277344, 402.1000061035156, 403.5299987792969, 412.8900146484375, 406.2699890136719, 391.30999755859375, 396.57000732421875, 407.4599914550781, 398.0799865722656, 386.6700134277344, 391.2900085449219, 377.3800048828125, 367.4599914550781, 390.0299987792969, 390.79998779296875, 394.5199890136719, 386.239990234375, 380.0299987792969, 368.07000732421875, 361.7300109863281, 350.260009765625, 341.760009765625, 358.7900085449219, 356.7699890136719, 340.32000732421875, 331.010009765625, 343.75, 357.5299987792969, 371.3999938964844, 380.6000061035156, 374.5899963378906, 382.9200134277344, 374.489990234375, 375.7099914550781, 373.8500061035156, 378.510009765625, 391.82000732421875, 381.4700012207031, 374.5899963378906, 373.4700012207031, 391.5, 380.1499938964844, 368.3500061035156, 362.1499938964844, 355.8800048828125, 348.0, 344.1000061035156, 350.42999267578125, 341.1300048828125, 337.8599853515625, 348.6099853515625, 226.19000244140625, 218.22000122070312, 215.52000427246094, 209.91000366210938, 198.39999389648438, 188.5399932861328, 199.52000427246094, 190.36000061035156, 199.4600067138672, 199.8699951171875, 204.00999450683594, 188.32000732421875, 180.97000122070312, 173.10000610351562, 177.66000366210938, 166.3699951171875, 174.30999755859375, 187.63999938964844, 186.50999450683594, 190.55999755859375, 177.19000244140625, 183.47999572753906, 186.35000610351562, 187.44000244140625, 180.33999633789062, 187.8300018310547, 191.39999389648438, 195.19000244140625, 197.44000244140625, 192.91000366210938, 205.08999633789062, 198.97999572753906, 197.13999938964844, 198.61000061035156, 202.8300018310547, 192.77000427246094, 182.94000244140625, 169.69000244140625, 167.5399932861328, 180.11000061035156, 173.35000610351562, 175.50999450683594, 170.91000366210938, 178.88999938964844, 181.7100067138672, 190.85000610351562, 189.13999938964844, 179.60000610351562, 178.36000061035156, 174.8699951171875, 179.9499969482422, 185.8800048828125, 184.05999755859375, 189.27000427246094, 186.97999572753906, 177.33999633789062, 174.4499969482422, 176.55999755859375, 174.77999877929688, 189.11000061035156, 190.9199981689453, 201.6300048828125, 216.44000244140625, 223.8800048828125, 220.44000244140625, 218.50999450683594, 213.91000366210938, 226.75, 226.02000427246094, 224.89999389648438, 226.2100067138672, 221.4199981689453, 226.72999572753906, 229.91000366210938, 226.77999877929688, 233.49000549316406, 229.94000244140625, 244.11000061035156, 242.6999969482422, 249.3000030517578, 249.11000061035156, 245.69000244140625, 241.14999389648438, 245.1699981689453, 241.16000366210938, 226.5399932861328, 224.5500030517578, 229.61000061035156, 233.97999572753906, 223.27999877929688, 224.57000732421875, 220.64999389648438, 223.55999755859375, 230.0399932861328, 226.11000061035156, 218.38999938964844, 228.9600067138672, 227.44000244140625, 233.57000732421875, 236.52999877929688, 218.1300048828125, 224.1199951171875, 235.3800048828125, 240.1300048828125, 243.6300048828125, 242.85000610351562, 236.8699951171875, 237.0500030517578, 226.41000366210938, 224.07000732421875, 224.36000061035156, 245.1999969482422, 239.7100067138672, 235.44000244140625, 239.0399932861328, 240.74000549316406, 236.72999572753906, 240.02000427246094, 224.75, 229.97999572753906, 214.2899932861328, 220.8699951171875, 232.50999450683594, 230.0, 245.10000610351562, 240.86000061035156, 272.3800048828125, 268.1600036621094, 289.57000732421875, 282.45001220703125, 291.0199890136719, 298.6199951171875, 296.94000244140625, 295.7200012207031, 291.8800048828125, 286.75, 273.0, 269.05999755859375, 260.7900085449219, 258.6000061035156, 263.4599914550781, 254.66000366210938, 274.9700012207031, 290.1300048828125, 299.2699890136719, 310.20001220703125, 306.0199890136719, 295.2799987792969, 287.9800109863281, 285.04998779296875, 286.69000244140625, 291.5, 285.5400085449219, 281.1700134277344, 280.9599914550781, 305.5299987792969, 316.95001220703125, 320.4100036621094, 312.5899963378906, 305.55999755859375, 308.4200134277344, 310.260009765625, 320.010009765625, 315.17999267578125, 320.3399963378906, 317.8299865722656, 290.4100036621094, 290.7099914550781, 288.29998779296875, 288.19000244140625, 297.9599914550781, 297.75, 294.9599914550781, 284.1700134277344, 276.8800048828125, 291.1199951171875, 294.8800048828125, 294.95001220703125, 309.4100036621094, 309.70001220703125, 315.54998779296875, 315.1700134277344, 327.5400085449219, 327.260009765625, 330.1300048828125, 332.82000732421875, 326.2200012207031, 326.3299865722656, 315.7799987792969, 342.5, 357.4200134277344, 363.8299865722656, 367.9599914550781, 364.8699951171875, 360.7699890136719, 353.1099853515625, 353.8599853515625, 361.989990234375, 366.8900146484375, 365.8999938964844, 361.4800109863281, 362.95001220703125, 366.8299865722656, 362.5, 347.3599853515625, 358.57000732421875, 359.9599914550781, 361.4200134277344, 350.7099914550781, 347.9599914550781, 337.5, 334.8800048828125, 323.6499938964844, 317.1499938964844, 323.0299987792969, 322.1300048828125, 313.4800109863281, 311.8800048828125, 315.17999267578125, 312.0299987792969, 308.4700012207031, 311.7900085449219, 297.7799987792969, 292.760009765625, 293.510009765625, 294.94000244140625, 303.7900085449219, 310.05999755859375, 303.5, 305.1300048828125, 305.7900085449219, 293.8999938964844, 320.3699951171875, 328.3900146484375, 327.6600036621094, 323.5199890136719, 332.0299987792969, 338.42999267578125, 345.4800109863281, 348.2799987792969, 346.75, 342.3500061035156, 339.3299865722656, 338.989990234375, 338.2099914550781, 331.0299987792969, 346.19000244140625, 338.6300048828125, 332.7200012207031, 333.70001220703125, 323.1199951171875, 325.3500061035156, 327.9800109863281, 329.0199890136719, 322.54998779296875, 321.1499938964844, 325.8500061035156, 329.92999267578125, 324.1199951171875, 317.54998779296875, 319.29998779296875, 320.7799987792969, 322.760009765625, 331.2099914550781, 332.1400146484375, 335.4200134277344, 344.760009765625, 339.8900146484375, 335.8900146484375, 333.75, 339.9599914550781, 371.2900085449219, 365.3599853515625], \"Buy\": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], \"Sell\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, \"minhistory\": 10, \"shots\": 100, \"buy_sell\": \"Buy\"}"})



def doRender(tname, values={}):
	if not os.path.isfile( os.path.join(os.getcwd(), 'templates/'+tname) ): #No such file
		return render_template('home.html')
	return render_template(tname, **values) 

@app.route('/home', methods=['GET'])
def home():
    return render_template('home.html')

#Capture Values for warm up and Initiate Warmup Protocol
@app.route('/warmup', methods=['POST'])
def warmupProtocol():
    global service, resources, warmup_time
    if request.method == 'POST':
        calculation_start_time = time.time()
        dataWarmups()
        calculation_end_time = time.time()
        warmup_time=calculation_end_time-calculation_start_time
        service = request.form.get('Service')
        resources = int(request.form.get('Number of Resources'))
        ### ADD CODE HERE TO WARMUP RESOURCES FOR LAMBA OR EC2 BASED ON Service
        if service == "Lambda":
            #establish_connection_lambda()
            #parallel = resources
            runs=[value for value in range(resources)]
            calculation_start_time = time.time()
            warming_lambda=getLambdaThreadsOutputs(dummy_data_for_Lambda_warmup, runs)
            warming_lambda=""
            calculation_end_time = time.time()
            warmup_time+=calculation_end_time-calculation_start_time
            print("LAMBDA WARMED UP??")
            #Pushing dummy values into lambda didnt bring sufficient difference
            return render_template('index.htm')
        elif service == "EC2":
            #Initiate Warmup Protocol for EC2
            calculation_start_time = time.time()
            intiateEC2InstanceV2()
            calculation_end_time = time.time()
            warmup_time+=calculation_end_time-calculation_start_time
            return render_template('index.htm')
    else:
        return "Invalid Request"

#----------## MAIN CALCULATION CODE ##------------#
# Defines a POST supporting calculate route
@app.route('/calculate_cw', methods=['POST'])
def calculateHandler():
    global service, resources, value_holder, value_retainer,execution_time
    if request.method == 'POST':
        #Extractiung values from the front end form
        #print(request.form)  # print the form data to the console
        #service = request.form.get('Service')
        #resources = int(request.form.get('Number of Resources'))
        #print(service)
        #print(resources)
        
        minhistory = int(request.form.get('Length of Price History'))
        shots = int(request.form.get('Number of Data Points'))
        buy_sell = str(request.form.get('Buy/Sell'))
        profit_loss = int(request.form.get('Number of days to determine Profit/Loss'))
        #print(service, resources, minhistory, shots, buy_sell, profit_loss)

        #print(data_subset.head())

        #Convert data set to a suitable form that can be handled inside the Lambda Function#

        #Convert Data Frame to Dictionary of Lists
        df_as_dict = data_subset.to_dict(orient='list')

        #Convert to JSON String
        import json
        # Create a dictionary with all the necessary variables
        params = {
            'data': df_as_dict,
            'minhistory': minhistory,
            'shots': shots,
            'buy_sell': buy_sell
        }
        
        # Convert the params dictionary to a JSON string
        params_json = json.dumps(params)

        # Create a dictionary with the outer structure
        payload = {
            'inputs': params_json
        }

        # Convert the payload dictionary to a JSON string
        payload_json = json.dumps(payload)

        #parallel = resources #uncomment after limiting the resources permitted value to 17 in the front end
        parallel = resources
        runs=[value for value in range(parallel)]

        ##call the function to start parallel calls
         ### Parallelisation Code referenced from Lab 3###
        
        thread_outputs = ""

        if service == "Lambda":
            #### CODE TO INVOKE THE LAMBDA FUNCTION USING THREADS####
            # Start the timer
            running_instances = 0
            calculation_start_time = time.time()
            thread_outputs = getLambdaThreadsOutputs(payload_json, runs)
            # End the timer
            calculation_end_time = time.time()
            execution_time=calculation_end_time-calculation_start_time
            #intiateEC2InstanceV2()
            #invokeEC2InstanceV2(payload_json)
        elif service == "EC2":
            calculation_start_time = time.time()
            thread_outputs=getEC2ThreadsOutputs(payload_json)
            running_instances = resources
            calculation_end_time = time.time()
            execution_time=calculation_end_time-calculation_start_time
            thread_outputs = (
                {
                    key: ast.literal_eval(value.rstrip())
                    for key, value in thread_dict.items()
                }
                for thread_dict in thread_outputs
            )
            ## Me realising that once I iterate over a generator and consume it becomes empty lol
            #for i in thread_outputs:
                # Process each dictionary
                #print(i)
            #print("CHECKING TYPE OF i ???")
            
            #output_data,avg_var95,avg_var99 = thread_results_extracter_v2(thread_outputs)
            #print(output_data.head(5))

            #invokeEC2InstanceV2(payload_json)
            #output_data,avg_var95,avg_var99 = thread_results_extracter_v2(thread_outputs)
            #print("THREAD EXTRACTOR WORKS???")
            #print(avg_var95)
            #print("THREAD EXTRACTOR WORKS???")
            #time.sleep(30)
            #terminate_EC2_Instances()
            #intiateEC2Instance()
            #return "EC2 Still Under Construction"

        output_data,avg_var95,avg_var99 = thread_results_extracter_v2(thread_outputs)

        output_data,total_profit = calculate_amount(output_data, data, profit_loss, buy_sell)

        #print("$$$$$$$")
        #print(total_profit)

        # Round the 'var95' and 'var99' values to 3 decimal places
        output_data['var95'] = output_data['var95'].round(5)
        output_data['var99'] = output_data['var99'].round(5)
        output_data['Amount'] = output_data['Amount'].round(5)

        # Extract the date portion from the 'date' column
        output_data['date'] = output_data['date'].dt.date

        #print(output_data)

        chart_size = "950x500"
        chart_url = generate_image_charts_url(output_data, chart_size)
        #print(chart_url)
        

        # Calculate the execution time
        #execution_time = calculation_end_time - calculation_start_time

        ### CALCULATING COST ###
        cost_incurred=calculate_cost()

        #Add Values to the value holder dictionary and call function to store it
        value_holder={'Service':service,'Resources':resources,'PriceHistory':minhistory,'DataPoints':shots,'BuySell':buy_sell,'History':profit_loss,'Avg95':round(avg_var95, 3),'Avg99':round(avg_var99, 3),'cost':"{:.5f}".format(cost_incurred),'TimeTaken':round(execution_time,3)}
        
        logAuditintoFirebase()

        value_retainer={'service':service, 'resources':resources, 'price_history':minhistory,'data_points':shots, 'buy_sell':buy_sell, 'profit_loss':profit_loss, 'avg_var95':avg_var95, 'avg_var99':avg_var99, 'total_profit':total_profit,'output_data':output_data.values.tolist(),'chart_url':chart_url,'execution_time':execution_time,'cost_incurred':cost_incurred,'running_instances':running_instances,'WarmupTime':round(warmup_time)}
        
        return render_template('output.html', service=service, resources=resources, price_history=minhistory, 
                    data_points=shots, buy_sell=buy_sell, profit_loss=profit_loss, avg_var95=avg_var95, avg_var99=avg_var99, total_profit=total_profit,output_data=output_data.values.tolist(),chart_url=chart_url,execution_time=execution_time,cost_incurred=cost_incurred,running_instances=running_instances,warmup_time=warmup_time)


    return "Error Calculate function did not work" 


@app.route('/audit', methods=['GET'])
def fetch_audit():
    #global value_holder
    #value_list = []  # Create an empty list
    # Append the values from the dictionary to the list
    #value_list.append(list(value_holder.values()))
    #fetchLogsfromFirebase()
    return render_template('audit.html',audit_data=fetchLogsfromFirebase())


@app.route('/terminate', methods=['GET'])
def terminateCall():
    global value_retainer,service
    if service=="EC2":
        terminate_EC2_Instances()
        value_retainer['running_instances']=0
    return render_template('output.html', service=value_retainer["service"], resources=value_retainer['resources'], price_history=value_retainer['price_history'], 
                        data_points=value_retainer['data_points'], buy_sell=value_retainer['buy_sell'], profit_loss=value_retainer['profit_loss'], avg_var95=value_retainer['avg_var95'], avg_var99=value_retainer['avg_var99'], total_profit=value_retainer['total_profit'],output_data=value_retainer['output_data'],chart_url=value_retainer['chart_url'],execution_time=value_retainer['execution_time'],cost_incurred=value_retainer['cost_incurred'],running_instances=0,warmup_time=0)
    #return render_template('home.html')

@app.route('/reset', methods=['GET'])
def resetCall():
    global service,warmup_time
    warmup_time=0
    # '0' the analysis - reset relevant variables but keep instances alive
    # add condition if no instances then go to home page itself
    if len(ec2_ins_ids)>0 or service=='Lambda':
        return render_template('index.htm')
    else:
        return render_template('home.html')

# catch all other page requests - doRender checks if a page is available (shows it) or not (index)
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def mainPage(path):
	return doRender(path)

@app.errorhandler(500)
# A small bit of error handling
def server_error(e):
    logging.exception('ERROR!')
    return """
    An  error occurred: <pre>{}</pre>
    """.format(e), 500



####Code to Calculate Amount and then add it as a column to the output dataframe

def calculate_amount(output_data, data_subset, n, buy_sell):
    # Convert the 'date' and 'Date' columns to datetime objects
    output_data['date'] = pd.to_datetime(output_data['date'])
    data_subset['Date'] = pd.to_datetime(data_subset['Date'])

    # Sort the data_subset dataframe by date
    data_subset.sort_values('Date', inplace=True)

    # Create an empty list to store the calculated amounts
    amounts = []

    # Iterate over each row in the output_data dataframe
    for index, row in output_data.iterrows():
        date = row['date']

        # Find the corresponding row in data_subset
        subset_row = data_subset[data_subset['Date'] == date]

        # Check if a matching row was found
        if not subset_row.empty:
            # Get the 'Close' value for the current date
            close_value = subset_row['Close'].values[0]

            # Find the 'Close' value n rows after the current date in data_subset
            subset_index = data_subset.index.get_loc(subset_row.index[0]) + n
            if subset_index < len(data_subset):
                next_close_value = data_subset.iloc[subset_index]['Close']

                # Calculate the difference and add it to the amounts list
                amount = next_close_value - close_value
                if (buy_sell == 'Buy'):
                    amounts.append(amount)
                else:
                    amounts.append(amount*(-1))

                continue  # Move to the next iteration

        # If no matching row was found or we reached the end of output_data, add NaN to the amounts list
        amounts.append(float('NaN'))

    # Add the 'Amount' column to the output_data dataframe
    output_data['Amount'] = amounts
    overall_profit = output_data['Amount'].mean()
    
    return output_data,overall_profit


##### EXTRACT ALL THE OUPUTS FROM THE THREAD OUTPUT #######

def thread_results_extracter_v2(thread_outputs):
    #print("INSIDE THREAD NEW EXTRACTORRRRR")
    #print(type(thread_outputs))

    render_df = {}
    
    # Extracting lists from each key and calculating averages
    for i in thread_outputs:
        for key, lsts in i.items():
            for lst in lsts:
                date = lst[0]
                var95 = lst[1]
                var99 = lst[2]
                
                if date not in render_df:
                    render_df[date] = []
                    
                render_df[date].append((var95, var99))

        # Calculating averages across all keys and lists for each date
    avg_data = []
    for date, values in render_df.items():
        avg_var95 = statistics.mean(v[0] for v in values)
        avg_var99 = statistics.mean(v[1] for v in values)
        avg_data.append([date, avg_var95, avg_var99])

    # Creating a DataFrame
    render_df = pd.DataFrame(avg_data, columns=['date', 'var95', 'var99'])
    overall_avg_var95 = render_df['var95'].mean()
    overall_avg_var99 = render_df['var99'].mean()
    return render_df, overall_avg_var95, overall_avg_var99



### WARMUP FOR LAMBDA - Establish Connectivity
def establish_connection_lambda():
    global establish_connection
    try:
        establish_connection = http.client.HTTPSConnection("8nokxpb2ng.execute-api.us-east-1.amazonaws.com")
    except IOError:
        print("Failed to connect to AWS Lambda Function")

####### CALL THREADS FOR LAMBDA FUNCTION - REFERENCED FROM LAB 3 ###

def getLambdaThreadOutput(id, payload_json):
    #global establish_connection
    lambda_data=""
    #print("********%^^^^^^^^%%%%$%$%$%$%$%%$%")
    #print(payload_json)
    #print("********%^^^^^PAYLOAD BABY^^^%%%%$%$%$%$%$%%$%")
    try:
        establish_connection = http.client.HTTPSConnection("8nokxpb2ng.execute-api.us-east-1.amazonaws.com")
        headers = {'Content-Type': 'application/json'}
        establish_connection.request("POST", "/default/lambda_function", payload_json, headers)
        response = establish_connection.getresponse()
        lambda_data = response.read().decode('utf-8')
        lambda_data = ast.literal_eval(lambda_data)  # Convert the string to a list object
    except IOError:
        print("Failed to connect to AWS Lambda Function")
    
    return {str(id+1): lambda_data}

def getLambdaThreadsOutputs(payload_json, runs):
    with ThreadPoolExecutor() as executor:
        results = executor.map(getLambdaThreadOutput, runs, [payload_json] * len(runs))
        #print("Inside Get Pages after thread calls")
    return results


###### FUNCTION FOR EC2 FINALLY :P #######

##### Initiation Attempt 2 Version 1.2 ######
def intiateEC2InstanceV2():
    # Set the user-data we need – use your endpoint
    global resources
    global ec2_instances_ip
    global ec2_ins_ids
    user_data = """#!/bin/bash
apt update -y
apt install python3 apache2 -y
apache2ctl restart
wget https://raw.githubusercontent.com/PrasanthVR63/cloudcomputingprash/0878a890fc8c3c239c6216889328950611b3d4a2/apache2.conf -O /etc/apache2/apache2.conf
wget https://raw.githubusercontent.com/PrasanthVR63/cloudcomputingprash/main/riskcalculator.py -P /var/www/html/
chmod 755 /var/www/html/riskcalculator.py
a2enmod cgi
service apache2 restart
systemctl restart apache2
"""

    user_data2 = """#!/bin/bash
apt update -y
apt install python3 apache2 -y
apache2ctl restart
wget https://raw.githubusercontent.com/PrasanthVR63/cloudcomputingprash/0878a890fc8c3c239c6216889328950611b3d4a2/apache2.conf -O /etc/apache2/apache2.conf
wget https://raw.githubusercontent.com/PrasanthVR63/cloudcomputingprash/main/simpleprint.py -P /var/www/html/
chmod 755 /var/www/html/simpleprint.py
a2enmod cgi
service apache2 restart
systemctl restart apache2
"""
    #Already checked in front end just putting it here to not mess up while testing
    #print(resources)

    
    
    # Create the EC2 instance
    ec2 = boto3.resource('ec2', region_name='us-east-1')

    instances = ec2.create_instances(
        ImageId='ami-0691ed274e12c8d44',
        MinCount=resources,
        MaxCount=resources,
        InstanceType='t2.micro',
        KeyName='kp-us-prash',
        SecurityGroups=['SSH'],
        UserData=user_data
    )

    #print("____-----____INSTANCES____-----___---____")
    #print(str(instances))
    #print(type(instances))
    #print("____-----____INSTANCES____-----___---____")


    # Wait for AWS to report instance(s) ready.
    for i in instances:
        i.wait_until_running()
        i.load()
        #print("------####------####--V2 EC2 DNS--####----####----####------")
        #print(i.public_dns_name)
        #print("------####------####--V2 EC2 DNS--####----####----####------")
        ec2_instances_ip.append(i.public_dns_name)
        ec2_ins_ids.append(i.id)
    #ec2.get_waiter('instance_running').wait(InstanceIds=ec2_ins_ids)
    time.sleep(120)



def invokeEC2InstanceV2(payload_json):
    global ec2_instances_ip
    dns=ec2_instances_ip[0]

    url = f'http://{dns}/riskcalculator.py'

    #HARDCODED THE INSTANCE"S DNS EMBEDDED URL FOR DEBUGGING UNCOMMENT ONCE DONE
    #url='http://ec2-54-221-119-29.compute-1.amazonaws.com/riskcalculator.py'

    #print("___----___---___--URL---___---_____---")
    #print(url)
    #print("___----___---___--URL---___---_____---")
    # Define the input data to be sent to the script
    #data = {
    #   'input': payload_json
        # Add more input data as needed
    #}
    
    #data = payload_json
    #data = json.loads(payload_json["inputs"])
    #print("^^^^^^^^^PAYLOAD JSON PASSED TO EC2^^^^^^^^^^^^^^********>>>>>")
    #print(payload_json)
    #print("^^^^^^^^^^^^^^^^^^^^^^^********>>>>>")

    headers = {
        'Content-Type': 'application/json'
    }

    #inputs = sys.argv[1:]

    # Send the POST request to the EC2 instance
    #response = requests.post(url, data=data, headers=headers,timeout=120)
    response = requests.post(url, data=payload_json, headers=headers,timeout=200)
    
    # Check the response status code
    if response.status_code == 200:
        # Successful request
        output = response.text
        #print("_____-----OUTPUT FROM EC2 INSTANCE_______------")
        #print("*****GOT RESPONSE*******")
        #print(output)
        #print(type(output))

        #print("_____-----OUTPUT FROM EC2 INSTANCE_______------")
        # Process the output as needed
    else:
        # Request failed
        print(f'Request failed with status code {response.status_code}')


####PARALLELISATION OF EC2######

def getEC2ThreadOutput(id, payload_json):

    dns=id

    url = f'http://{dns}/riskcalculator.py'

    #print("___----___---___--EC2s URL---___---_____---")
    #print("Inside Thread Call")
    #print(dns)
    #print(url)
    #print("___----___---___--EC2s URL---___---_____---")

    headers = {
        'Content-Type': 'application/json'
    }

    # Send the POST request to the EC2 instance
    response = requests.post(url, data=payload_json, headers=headers,timeout=120)
    
    # Check the response status code
    if response.status_code == 200:
        # Successful request
        output = response.text
    else:
        # Request failed
        print(f'Request failed with status code {response.status_code}')
    
    return {str(dns): output}

def getEC2ThreadsOutputs(payload_json):
    global ec2_instances_ip

    with ThreadPoolExecutor() as executor:
        results = executor.map(getEC2ThreadOutput, ec2_instances_ip, [payload_json] * len(ec2_instances_ip))
        print("Inside Get Pages after EC2!!!! thread calls")
    return results

################################

#### FUNCTION TO TERMINATE EC2 INSTANCES ####
def terminate_EC2_Instances():
    global ec2_ins_ids
    if len(ec2_ins_ids)>0:
        ec2 = boto3.resource('ec2', region_name='us-east-1')
        for instance_id in ec2_ins_ids:
            ec2.instances.filter(InstanceIds=[instance_id]).terminate()
        ec2_ins_ids=[]
###### END OF FUNCTIONS RELATED TO EC2#######

### FUNCTION TO GENERATE CHARTS USING IMAGE_CHARTS SERVICE ####

def generate_image_charts_url(output_data, chart_size):
    sorted_data = output_data.sort_values('date')
    encoded_labels = "|".join(sorted_data['date'].astype(str))
    encoded_var95 = ",".join(map(lambda x: f"{x:.5f}", sorted_data['var95']))
    encoded_var99 = ",".join(map(lambda x: f"{x:.5f}", sorted_data['var99']))
    mean_var95 = np.mean(sorted_data['var95'])
    mean_var99 = np.mean(sorted_data['var99'])
    mean_var95_filled = [mean_var95] * len(sorted_data)
    encoded_mean_var95 = ",".join(map(lambda x: f"{x:.3f}", mean_var95_filled))
    mean_var99_filled = [mean_var99] * len(sorted_data)
    encoded_mean_var99 = ",".join(map(lambda x: f"{x:.3f}", mean_var99_filled))

    
    chart_data = f"{encoded_var95}|{encoded_var99}|{encoded_mean_var95}|{encoded_mean_var99}"
    chart_size = urllib.parse.quote(chart_size)
    legend_labels = "var95|var99|var95 avg|var99 avg"
    url = f"https://image-charts.com/chart?chxt=x,y&cht=lc&chd=a:{chart_data}&chs={chart_size}&chxs=0,min90&chxl=0:|{encoded_labels}&chco=F18F01,006E90,E1A44A,79C7DF&chg=1,1&&chdl={legend_labels}"

    return url

def calculate_cost():
    global warmup_time,execution_time
    total_time = warmup_time+execution_time;
    if service=='Lambda':
        return (0.0116/3600)*resources*total_time
    else:
        return (0.0000021)*resources*total_time





def logAuditintoFirebase():
    global value_holder, db
    #print(value_holder)

    # Add timestamp to the value_holder dictionary
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    value_holder['Timestamp'] = timestamp

    db = firestore.client()
    doc_ref = db.collection('comm034AuditLogs').document()
    doc_ref.set(value_holder)


def fetchLogsfromFirebase():
    global db
    docs = db.collection('comm034AuditLogs').stream()
    values_list = []
    # Define the desired order of keys
    key_order = ['Timestamp', 'Service', 'Resources', 'PriceHistory', 'DataPoints', 'BuySell',
                 'History', 'Avg95', 'Avg99', 'cost', 'TimeTaken']

    # Iterate over the documents
    for doc in docs:
        doc_data = doc.to_dict()
        values = []
        for key in key_order:
            if key in doc_data:
                if key == 'Timestamp':
                    # Check if timestamp is already a string or convert it to datetime object
                    timestamp = doc_data[key]
                    if isinstance(timestamp, str):
                        timestamp = datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                    values.append(timestamp)
                else:
                    values.append(doc_data[key])
        values_list.append(values)

    # Sort the values_list based on the timestamp (first element in each sublist)
    values_list.sort(key=lambda x: x[0] if isinstance(x[0], datetime.datetime) else datetime.datetime.min)

    # Convert timestamp to date only format
    for values in values_list:
        if isinstance(values[0], datetime.datetime):
            values[0] = values[0].strftime("%Y-%m-%d")

    # Print the list of lists
    for values in values_list:
        print(values)

    return values_list


##### FETCHING DATA FROM YFINANCE AND ESTABLISHING DB CONNECTIONS

def dataWarmups():
    #NFLX
    global data,data_subset
    data = pdr.get_data_yahoo('NFLX', start=decadeAgo, end=today) 
    data = data.reset_index(drop=False)
    # Convert the 'Date' column to a datetime object and then to a string with only the date
    data['Date'] = pd.to_datetime(data['Date']).dt.date.astype(str)
    # Other symbols: TSLA – Tesla, AMZN – Amazon, ZM – Zoom, ETH-USD – Ethereum-Dollar etc.

    # Add two columns to this to allow for Buy and Sell signals
    # fill with zero
    data['Buy']=0
    data['Sell']=0

    # Select only the columns needed from the data DataFrame
    data_subset = data[['Date', 'Open', 'Close', 'Buy', 'Sell']]

    for i in range(2, len(data_subset)): 

        body = 0.01

        # Three Soldiers
        if (data_subset.Close[i] - data_subset.Open[i]) >= body  \
    and data_subset.Close[i] > data_subset.Close[i-1]  \
    and (data_subset.Close[i-1] - data_subset.Open[i-1]) >= body  \
    and data_subset.Close[i-1] > data_subset.Close[i-2]  \
    and (data_subset.Close[i-2] - data_subset.Open[i-2]) >= body:
            data_subset.at[data_subset.index[i], 'Buy'] = 1
            #print("Buy at ", data.index[i])

        # Three Crows
        if (data_subset.Open[i] - data_subset.Close[i]) >= body  \
    and data_subset.Close[i] < data_subset.Close[i-1] \
    and (data_subset.Open[i-1] - data_subset.Close[i-1]) >= body  \
    and data_subset.Close[i-1] < data_subset.Close[i-2]  \
    and (data_subset.Open[i-2] - data_subset.Close[i-2]) >= body:
            data_subset.at[data_subset.index[i], 'Sell'] = 1
            #print("Sell at ", data.index[i])

    # Data now contains signals, so we can pick signals with a minimum amount
    # of historic data, and use shots for the amount of simulated values
    # to be generated based on the mean and standard deviation of the recent history







if __name__ == '__main__':
    # Entry point for running on the local machine
    # On GAE, endpoints (e.g. /) would be called.
    # Called as: gunicorn -b :$PORT index:app,
    # host is localhost; port is 8080; this file is index (.py)
    app.run(host='127.0.0.1', port=8080, debug=True)


###### Code referenced from Lab 1 #######



#### END OF WORKING CODE NO FUNCTIONS BELOW THIS IS CALLED OR USED ######

### Function to be moved inside of Lambda ###
###### LAMBDA ___FUNCTION ######
def lambda_function(params_json):
    
    # Assuming params_json contains the JSON string
    params = json.loads(params_json)
    data = params['data']
    minhistory = params['minhistory']
    shots = params['shots']
    buy_sell = params['buy_sell']
    results = []

    for i in range(minhistory, len(data['Buy'])):
        if buy_sell == "Buy" and data['Buy'][i] == 1:  # if we're interested in Buy signals
            subset_close = data['Close'][i - minhistory:i]

            # Calculate mean and standard deviation
            changes = [subset_close[j] / subset_close[j-1] - 1 for j in range(1, len(subset_close))]
            mean = statistics.mean(changes)
            std = statistics.stdev(changes)

            # Generate much larger random number series with the same broad characteristics
            simulated = [random.gauss(mean, std) for x in range(shots)]

            # Sort and pick 95% and 99%
            simulated.sort(reverse=True)
            var95 = simulated[int(len(simulated) * 0.95)]
            var99 = simulated[int(len(simulated) * 0.99)]
            print(var95, var99)  # so you can see what is being produced
            results.append((data['Date'][i], var95, var99))
        elif buy_sell == "Sell" and data['Sell'][i] == 1: #if we're interested in Sell signals
            subset_close = data['Close'][i - minhistory:i]

            # Calculate mean and standard deviation
            changes = [subset_close[j] / subset_close[j-1] - 1 for j in range(1, len(subset_close))]
            mean = statistics.mean(changes)
            std = statistics.stdev(changes)

            # Generate much larger random number series with the same broad characteristics
            simulated = [random.gauss(mean, std) for x in range(shots)]

            # Sort and pick 95% and 99%
            simulated.sort(reverse=True)
            var95 = simulated[int(len(simulated) * 0.95)]
            var99 = simulated[int(len(simulated) * 0.99)]
            print(var95, var99)  # so you can see what is being produced
            results.append((data['Date'][i], var95, var99))
             
    return results

